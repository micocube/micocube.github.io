<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java-Maven+Idea-构建SpringBoot项目(光速入门)]]></title>
    <url>%2F2019%2F03%2F13%2Fspringboot%2FJava-Maven%2BIdea-%E6%9E%84%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE(%E5%85%89%E9%80%9F%E5%85%A5%E9%97%A8)%2F</url>
    <content type="text"><![CDATA[springboot+jpa+druid构建Restful服务 springboot官网 maven 创建项目 1mvn archetype:generate -DgroupId=com.mico.emptyspringboot -DartifactId=emptyspringboot -DarchetypeArtifactId=maven-archetype-quickstart -DinteractivMode=false 当然你可以从springboot的官网下载quickstart,也可以从intelij idea的File-&gt;New-&gt;Project-&gt;Spring Initializr pom.xml大概像这样: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.1.2.RELEASE&lt;/version&gt;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;groupId&gt;com.mico.domo.springboot&lt;/groupId&gt;&lt;artifactId&gt;demo&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;demo&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;properties&gt;&lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;druid&lt;/artifactId&gt;&lt;version&gt;1.0.18&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt; 本地已创建项目push到远程git springboot的配置文件application.properties 123456789101112131415161718192021222324252627282930313233343536373839404142434445# Server Domain-Portserver.address=127.0.0.1server.port=9090#spring-datasourcespring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=truespring.datasource.username=rootspring.datasource.password=micocubespring.datasource.driverClassName=com.mysql.cj.jdbc.Driverspring.datasource.initialSize=5spring.datasource.minIdle=5spring.datasource.maxActive=20spring.datasource.maxWait=60000spring.datasource.timeBetweenEvictionRunsMillis=60000spring.datasource.minEvictableIdleTimeMillis=300000spring.datasource.validationQuery=SELECT 1 FROM DUALspring.datasource.testWhileIdle=truespring.datasource.testOnBorrow=falsespring.datasource.testOnReturn=falsespring.datasource.poolPreparedStatements=truespring.datasource.maxPoolPreparedStatementPerConnectionSize=20spring.datasource.filters=stat,wall,log4jspring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000spring.datasource.useGlobalDataSourceStat=true#JPA Configuration:spring.jpa.database=MYSQL# Show or not log for each sql queryspring.jpa.show-sql=truespring.jpa.generate-ddl=true# Hibernate ddl auto (create, create-drop, update)spring.jpa.hibernate.ddl-auto=update#loglogging.config=classpath:logback.xmlLOG_PATH=./logs/coding.log#encodingspring.http.encoding.force=truespring.http.encoding.charset=UTF-8spring.http.encoding.enabled=trueserver.tomcat.uri-encoding=UTF-8 springboot日志配置文件,logback.xml,Springboot logback.xml配置文件详解,Springboot 使用druid连接池抛ClassNotFoundException 12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration&gt;&lt;appender name="FILE" class="ch.qos.logback.core.FileAppender"&gt;&lt;file&gt;/data/www/file/logs/springboot.log&lt;/file&gt;&lt;encoder&gt;&lt;pattern&gt;%date %d&#123;HH: mm:ss.SSS&#125; %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt;&lt;encoder&gt;&lt;pattern&gt;%date %d&#123;HH: mm:ss.SSS&#125; %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;root level="debug"&gt;&lt;appender-ref ref="FILE" /&gt;&lt;appender-ref ref="STDOUT" /&gt;&lt;/root&gt;&lt;/configuration&gt; springboot启动类Application.java 12345678910111213package com.mico.domo.springboot.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class DemoApplication &#123;public static void main(String[] args) &#123;SpringApplication.run(DemoApplication.class, args);&#125;&#125; 数据源配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110package com.mico.emptyspringboot.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import javax.sql.DataSource;import java.sql.SQLException;/*** DruidDBConfig类被@Configuration标注，用作配置信息；* DataSource对象被@Bean声明，为Spring容器所管理，* @Primary表示这里定义的DataSource将覆盖其他来源的DataSource。*jdbc.url=$&#123;jdbc.url&#125;*最新的支持方式如下:*jdbc.url=@jdbc.url@*/@Configurationpublic class DruidDBConfig &#123;// private Logger logger = LoggerFactory.getLogger(DruidDBConfig.class);@Value("$&#123;spring.datasource.url&#125;")private String dbUrl;@Value("$&#123;spring.datasource.username&#125;")private String username;@Value("$&#123;spring.datasource.password&#125;")private String password;@Value("$&#123;spring.datasource.driverClassName&#125;")private String driverClassName;@Value("$&#123;spring.datasource.initialSize&#125;")private int initialSize;@Value("$&#123;spring.datasource.minIdle&#125;")private int minIdle;@Value("$&#123;spring.datasource.maxActive&#125;")private int maxActive;@Value("$&#123;spring.datasource.maxWait&#125;")private int maxWait;@Value("$&#123;spring.datasource.timeBetweenEvictionRunsMillis&#125;")private int timeBetweenEvictionRunsMillis;@Value("$&#123;spring.datasource.minEvictableIdleTimeMillis&#125;")private int minEvictableIdleTimeMillis;@Value("$&#123;spring.datasource.validationQuery&#125;")private String validationQuery;@Value("$&#123;spring.datasource.testWhileIdle&#125;")private boolean testWhileIdle;@Value("$&#123;spring.datasource.testOnBorrow&#125;")private boolean testOnBorrow;@Value("$&#123;spring.datasource.testOnReturn&#125;")private boolean testOnReturn;@Value("$&#123;spring.datasource.poolPreparedStatements&#125;")private boolean poolPreparedStatements;@Value("$&#123;spring.datasource.maxPoolPreparedStatementPerConnectionSize&#125;")private int maxPoolPreparedStatementPerConnectionSize;@Value("$&#123;spring.datasource.filters&#125;")private String filters;@Value("&#123;spring.datasource.connectionProperties&#125;")private String connectionProperties;@Bean // 声明其为Bean实例@Primary // 在同样的DataSource中，首先使用被标注的DataSourcepublic DataSource dataSource() &#123;DruidDataSource datasource = new DruidDataSource();datasource.setUrl(this.dbUrl);datasource.setUsername(username);datasource.setPassword(password);datasource.setDriverClassName(driverClassName);// configurationdatasource.setInitialSize(initialSize);datasource.setMinIdle(minIdle);datasource.setMaxActive(maxActive);datasource.setMaxWait(maxWait);datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);datasource.setValidationQuery(validationQuery);datasource.setTestWhileIdle(testWhileIdle);datasource.setTestOnBorrow(testOnBorrow);datasource.setTestOnReturn(testOnReturn);datasource.setPoolPreparedStatements(poolPreparedStatements);datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);try &#123;datasource.setFilters(filters);&#125; catch (SQLException e) &#123;&#125;datasource.setConnectionProperties(connectionProperties);return datasource;&#125;&#125; App 配置类，WebAppConfigurer 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.mico.emptyspringboot.config;import org.springframework.boot.web.servlet.MultipartConfigFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.StringHttpMessageConverter;import org.springframework.util.unit.DataSize;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import javax.servlet.MultipartConfigElement;import java.nio.charset.Charset;/*** 访问uri:http://localhost:9090/swagger-ui.html*/@Configurationpublic class WebAppConfigurer implements WebMvcConfigurer &#123;@Overridepublic void addViewControllers(ViewControllerRegistry registry) &#123;registry.addViewController("/sign_in").setViewName("thymeleaf/login");registry.addViewController("/sign_up").setViewName("thymeleaf/registry");/*** 与上面的等效@RequestMapping("/sign_in")public String sign_in() &#123;return "thymeleaf/login";&#125;@RequestMapping("/sign_up")public String sign_up() &#123;return "thymeleaf/registry";&#125;*/&#125;@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;registry.addResourceHandler("/static/**").addResourceLocations("classpath:/static/");&#125;@Beanpublic MultipartConfigElement multipartConfigElement()&#123;MultipartConfigFactory factory = new MultipartConfigFactory();factory.setMaxFileSize(DataSize.ofMegabytes(10));factory.setMaxRequestSize(DataSize.ofMegabytes(10));return factory.createMultipartConfig();&#125;@Beanpublic HttpMessageConverter&lt;String&gt; responseBodyConverter() &#123;StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset.forName("UTF-8"));return converter;&#125;&#125; domain 12345678910111213141516171819202122232425package com.mico.domo.springboot.demo.domain;import lombok.Data;import javax.persistence.*;@Entity@Table@Datapublic class Role &#123;@Id@GeneratedValue(strategy = GenerationType.IDENTITY)private Integer id;private String name;public Role()&#123;&#125;public Role(String name) &#123;this.name = name;&#125;&#125; 12345678910111213141516171819202122232425262728package com.mico.domo.springboot.demo.domain;import lombok.Data;import javax.persistence.*;import java.util.List;@Entity@Table@Datapublic class User &#123;@Id@GeneratedValue(strategy = GenerationType.IDENTITY)private Integer id;private String username;private String password;@ManyToMany(cascade = &#123;CascadeType.REFRESH&#125;,fetch = FetchType.EAGER)private List&lt;Role&gt; roles;public User() &#123;&#125;public User(String username, String password) &#123;this.username = username;this.password = password;&#125;&#125; DAO 123456789101112131415package com.mico.domo.springboot.demo.repository;import com.mico.domo.springboot.demo.domain.User;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;User findByUsername(String name);@Query(value = "FROM User u where u.username=:name")User findUser(@Param("name") String name);&#125; Service 1234567891011121314151617181920212223package com.mico.domo.springboot.demo.service;import com.mico.domo.springboot.demo.domain.User;import com.mico.domo.springboot.demo.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Objects;@Servicepublic class UserDetailsService &#123;@Autowiredprivate UserRepository userRepository;public User loadUserByUsername(String s) &#123;return userRepository.findByUsername(s);&#125;&#125; Controller 12345678910111213141516171819202122232425262728293031package com.mico.domo.springboot.demo.controller;import com.mico.domo.springboot.demo.domain.User;import com.mico.domo.springboot.demo.service.UserDetailsService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;@RestController@RequestMapping("/user")public class UserController &#123;@Autowiredprivate UserDetailsService userDetailsService;@RequestMapping(value = "/&#123;id&#125;",method = RequestMethod.GET)@ResponseBodypublic User view(@PathVariable("id") Integer id) &#123;User user = new User();user.setId(id);user.setUsername("zhang");return user;&#125;@RequestMapping(value = "/login")@ResponseBodypublic User login(String userName, String password) &#123;User user = userDetailsService.loadUserByUsername(userName);return user;&#125;&#125; spring.jpa.hibernate.ddl-auto=update时jpa会自动创建数据库，插入数据 123INSERT INTO test.role (id,name) VALUES (1,'User');INSERT INTO test.user (id,username, password) VALUES (1,'root', '$2a$10$TeayMIrpuDwrpLHL5QsNpOcPeE/Kx3c4UYbi4NQzNkfKgf9YtL6F2');INSERT INTO test.user_roles (user_id, roles_id) VALUES (1, 1); Run DemoApplication.main会从9090端口启动服务 项目源码]]></content>
      <tags>
        <tag>SpringBoot全家桶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Springboot-logback-xml配置文件详解]]></title>
    <url>%2F2019%2F03%2F13%2Fspringboot%2FJava-Springboot-logback-xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[依赖 1234567891011&lt;!-- springboot 的springboot-core已经依赖了logback-core和logback-classic --&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;&lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt; Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。 自定义日志配置由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载： 日志框架 配置文件名 Logback logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy Log4j log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml Log4j2 log4j2-spring.xml, log4j2.xml JDK (Java Util Logging) logging.properties Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。上面是默认的命名规则，并且放在src/main/resources下面即可。如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：logging.config=classpath:logback.xml logback.xml 示例 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE xml&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;&lt;contextName&gt;logback&lt;/contextName&gt;&lt;property name=&quot;log.path&quot; value=&quot;log&quot; /&gt;&lt;!--输出到控制台--&gt;&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&lt;!-- &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;&lt;level&gt;ERROR&lt;/level&gt;&lt;/filter&gt;--&gt;&lt;encoder&gt;&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;!--输出到文件--&gt;&lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;&lt;fileNamePattern&gt;$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;&lt;/rollingPolicy&gt;&lt;encoder&gt;&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;root level=&quot;info&quot;&gt;&lt;appender-ref ref=&quot;console&quot; /&gt;&lt;appender-ref ref=&quot;file&quot; /&gt;&lt;/root&gt;&lt;!-- logback为java中的包 --&gt;&lt;logger name=&quot;com.mico.emptyspringboot.controller&quot;/&gt;&lt;!--logback.LogbackDemo：类的全路径 --&gt;&lt;logger name=&quot;com.mico.emptyspringboot.controller.UserController&quot; level=&quot;WARN&quot; additivity=&quot;false&quot;&gt;&lt;appender-ref ref=&quot;console&quot;/&gt;&lt;/logger&gt;&lt;/configuration&gt; 根节点&lt;configuration&gt;包含的属性 scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 根节点&lt;configuration&gt;的子节点：&lt;configuration&gt;下面一共有2个属性，3个子节点，分别是： 设置上下文名称&lt;contextName&gt; 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。&lt;contextName&gt;logback&lt;/contextName&gt; 设置变量&lt;property&gt; 用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。&lt;property name=&quot;log.path&quot; value=&quot;log&quot; /&gt; 子节点&lt;appender&gt; appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。控制台输出ConsoleAppender：123456789&lt;!--输出到控制台--&gt;&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;&lt;level&gt;ERROR&lt;/level&gt;&lt;/filter&gt;&lt;encoder&gt;&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt; &lt;encoder&gt;表示对日志进行编码： %d{HH: mm:ss.SSS}——日志输出时间。 %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用。 %-5level——日志级别，并且使用5个字符靠左对齐。 %logger{36}——日志输出者的名字。 %msg——日志消息。 %n——平台的换行符。 ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志 输出到文件RollingFileAppender：另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志： 1234567891011&lt;!--输出到文件--&gt;&lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;&lt;fileNamePattern&gt;$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;&lt;maxHistory&gt;30&lt;/maxHistory&gt;&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;&lt;/rollingPolicy&gt;&lt;encoder&gt;&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt; 其中重要的是rollingPolicy的定义： &lt;fileNamePattern&gt;${log.path}/logback.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;定义了日志的切分方式——把每一天的日志归档到一个文件中； &lt;maxHistory&gt;30&lt;/maxHistory&gt;表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式； &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。 logback 每天生成和大小生成冲突的问题可以看这个解答。 子节点&lt;root&gt;root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性，用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个logger。 1234&lt;root level=&quot;debug&quot;&gt;&lt;appender-ref ref=&quot;console&quot; /&gt;&lt;appender-ref ref=&quot;file&quot; /&gt;&lt;/root&gt; 子节点&lt;logger&gt; &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。 name：用来指定受此logger约束的某一个包或者具体的某一个类。 level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。 addtivity：是否向上级logger传递打印信息。默认是true。]]></content>
      <tags>
        <tag>SpringBoot全家桶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Springboot-使用druid连接池抛ClassNotFoundException]]></title>
    <url>%2F2019%2F03%2F13%2Fspringboot%2FJava-Springboot-%E4%BD%BF%E7%94%A8druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%8A%9BClassNotFoundException%2F</url>
    <content type="text"><![CDATA[抛错 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;dataSource&apos; defined in class path resource [com/mico/domo/springboot/demo/config/DruidDBConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method &apos;dataSource&apos; threw exception; nested exception is java.lang.NoClassDefFoundError: org/apache/log4j/Loggerat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1244)at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)... 28 common frames omittedCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method &apos;dataSource&apos; threw exception; nested exception is java.lang.NoClassDefFoundError: org/apache/log4j/Loggerat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)... 42 common frames omittedCaused by: java.lang.NoClassDefFoundError: org/apache/log4j/Loggerat com.alibaba.druid.filter.logging.Log4jFilter.&lt;init&gt;(Log4jFilter.java:26)at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)at java.lang.reflect.Constructor.newInstance(Constructor.java:423)at java.lang.Class.newInstance(Class.java:442)at com.alibaba.druid.filter.FilterManager.loadFilter(FilterManager.java:114)at com.alibaba.druid.pool.DruidAbstractDataSource.addFilters(DruidAbstractDataSource.java:1230)at com.alibaba.druid.pool.DruidAbstractDataSource.setFilters(DruidAbstractDataSource.java:1219)at com.mico.domo.springboot.demo.config.DruidDBConfig.dataSource(DruidDBConfig.java:102)at com.mico.domo.springboot.demo.config.DruidDBConfig$$EnhancerBySpringCGLIB$$b8f4ceda.CGLIB$dataSource$0(&lt;generated&gt;)at com.mico.domo.springboot.demo.config.DruidDBConfig$$EnhancerBySpringCGLIB$$b8f4ceda$$FastClassBySpringCGLIB$$caae8b62.invoke(&lt;generated&gt;)at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)at com.mico.domo.springboot.demo.config.DruidDBConfig$$EnhancerBySpringCGLIB$$b8f4ceda.dataSource(&lt;generated&gt;)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)at java.lang.reflect.Method.invoke(Method.java:498)at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)... 43 common frames omittedCaused by: java.lang.ClassNotFoundException: org.apache.log4j.Loggerat java.net.URLClassLoader.findClass(URLClassLoader.java:381)at java.lang.ClassLoader.loadClass(ClassLoader.java:424)at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)at java.lang.ClassLoader.loadClass(ClassLoader.java:357)... 63 common frames omitted 可以通过添加 12345&lt;dependency&gt;&lt;groupId&gt;log4j&lt;/groupId&gt;&lt;artifactId&gt;log4j&lt;/artifactId&gt;&lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt; 但是这样导致的问题是SpringBoot和Druid分别用自己的日志框架，SpringBoot用的是slf4j和logback。druid使用的日志框架是log4j,个人比较推荐的做法：引入log4j-over-slf4j包，作用是通过中间包来替换log4j日志框架，所有日志最终都统一到slf4j，并由logback实现。 12345&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;&lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt; log4j-over-slf4j:To use log4j-over-slf4j in your own application, the first step is to locate and then to replace log4j.jar with log4j-over-slf4j.jar. Note that you still need an SLF4J binding and its dependencies for log4j-over-slf4j to work properly. In most situations, replacing a jar file is all it takes in order to migrate from log4j to SLF4J. Note that as a result of this migration, log4j configuration files will no longer be picked up. If you need to migrate your log4j.properties file to logback, the log4j translator (用这个可以将log4j的配置文件转换成logback的配置文件)might be of help. For configuring logback, please refer to its manual. 附赠一个logback配置文件(logback.xml)12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt;&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;&lt;file&gt;/data/www/file/logs/springboot.log&lt;/file&gt;&lt;encoder&gt;&lt;pattern&gt;%date %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&lt;encoder&gt;&lt;pattern&gt;%msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;root level=&quot;debug&quot;&gt;&lt;appender-ref ref=&quot;FILE&quot; /&gt;&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;&lt;/root&gt;&lt;/configuration&gt;]]></content>
      <tags>
        <tag>SpringBoot全家桶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Springboot-集成spring-security简单示例(Version-springboot-2-1-3-RELEASE]]></title>
    <url>%2F2019%2F03%2F13%2Fspringboot%2FJava-Springboot-%E9%9B%86%E6%88%90spring-security%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B(Version-springboot-2-1-3-RELEASE%2F</url>
    <content type="text"><![CDATA[使用Idea的Spring Initializr或者SpringBoot官网下载quickstart 添加依赖 1234&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt; 新建控制器 123456789import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class UserController &#123;@GetMapping(&quot;/user&quot;)public String getUsers() &#123;return &quot;Hello Spring Security&quot;;&#125;&#125; logback.xml 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt;&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;&lt;file&gt;/data/www/file/logs/springboot.log&lt;/file&gt;&lt;encoder&gt;&lt;pattern&gt;%date %d&#123;HH: mm:ss.SSS&#125; %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&lt;encoder&gt;&lt;pattern&gt;%date %d&#123;HH: mm:ss.SSS&#125; %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;&lt;/encoder&gt;&lt;/appender&gt;&lt;root level=&quot;debug&quot;&gt;&lt;appender-ref ref=&quot;FILE&quot; /&gt;&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;&lt;/root&gt;&lt;/configuration&gt; application.properties 123# Server Domain-Portserver.address=127.0.0.1server.port=9090 启动SpringBootApplication，springboot已经和spring-security集成了，如果直接访问http://localhost:9090/user会跳到登陆页面，这是spring-security自带的，但是我们并没有创建任何用户啊，spring-security有个默认的用户名user，密码在控制台 默认密码在控制信息里,在控制台信息里搜索Using generated，当然你的程序生成的密码肯定和我的不一样 1Using generated security password: 6ae529ee-2281-4b66-8f30-b1ba0e7fec97 使用用户名和密码登陆后： 源码]]></content>
      <tags>
        <tag>SpringBoot全家桶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Springboot-集成spring-security自定义UserDetailsService(Version-springb]]></title>
    <url>%2F2019%2F03%2F13%2Fspringboot%2FJava-Springboot-%E9%9B%86%E6%88%90spring-security%E8%87%AA%E5%AE%9A%E4%B9%89UserDetailsService(Version-springb%2F</url>
    <content type="text"><![CDATA[基于Java Springboot 集成spring-security简单示例(Version:springboot-2.1.3.RELEASE) 新建domain类，User和Role，用户和角色123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package com.example.springboot.springbootsecurity.domain;import com.fasterxml.jackson.annotation.JsonIgnore;import lombok.Data;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.security.Timestamp;import java.util.ArrayList;import java.util.List;@Datapublic class User implements UserDetails &#123;private Long id;private String username;private String password;private String nickname;private boolean enabled = false;private List&lt;Role&gt; roles;private String email;private String userface;private Timestamp regTime;@Override@JsonIgnorepublic boolean isAccountNonExpired() &#123; // 帐户是否过期return true;&#125;@Override@JsonIgnorepublic boolean isAccountNonLocked() &#123; // 帐户是否被冻结return true;&#125;// 帐户密码是否过期，一般有的密码要求性高的系统会使用到，比较每隔一段时间就要求用户重置密码@Override@JsonIgnorepublic boolean isCredentialsNonExpired() &#123;return true;&#125;@Overridepublic boolean isEnabled() &#123; // 帐号是否可用return enabled;&#125;public void setEnabled(boolean enabled) &#123;this.enabled = enabled;&#125;@Override@JsonIgnorepublic List&lt;GrantedAuthority&gt; getAuthorities() &#123;List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();for (Role role : roles) &#123;authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + role.getName()));&#125;return authorities;&#125;public User(String username, String password, List&lt;Role&gt; roles) &#123;this.username = username;this.password = password;this.roles = roles;&#125;&#125; 12345678910111213141516171819package com.example.springboot.springbootsecurity.domain;import lombok.Data;@Datapublic class Role &#123;private Integer id;private String name;public Role()&#123;&#125;public Role(String name) &#123;this.name = name;&#125;&#125; 新建MyUserDetailsService类并实现UserDetailsService接口 12345678910111213141516171819202122232425262728293031package com.example.springboot.springbootsecurity.service;import com.example.springboot.springbootsecurity.domain.Role;import com.example.springboot.springbootsecurity.domain.User;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import java.util.Arrays;public class MyUserDetailsService implements UserDetailsService &#123;private Logger logger = LoggerFactory.getLogger(getClass());@Overridepublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;logger.info(&quot;用户的用户名: &#123;&#125;&quot;, username);// TODO 根据用户名，查找到对应的密码，与权限// 封装用户信息，并返回。参数分别是：用户名，密码，用户权限String encode = new BCryptPasswordEncoder().encode(&quot;123456&quot;);//123456 &quot;$2a$10$rE5.RvkHaB06t.9GjGeaW.jNHysRQpBXObl3ZSahzBesfq7tAkX56&quot;User user = new User(username, encode,Arrays.asList(new Role(&quot;admin&quot;)));user.setEnabled(true);return user;&#125;&#125; 新建配置类WebSecurityConfig 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.example.springboot.springbootsecurity.config;import com.example.springboot.springbootsecurity.service.MyUserDetailsService;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecuritypublic class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;@BeanUserDetailsService userDetails()&#123;return new MyUserDetailsService();&#125;/*** 没有passwordEncoder会抛java.lang.IllegalArgumentException:* There is no PasswordEncoder mapped for the id &quot;null&quot;*/@BeanPasswordEncoder passwordEncoder()&#123;return new BCryptPasswordEncoder();&#125;@Overrideprotected void configure(HttpSecurity http) throws Exception &#123;http.formLogin() // 定义当需要用户登录时候，转到的登录页面。.and().authorizeRequests() // 定义哪些URL需要被保护、哪些不需要被保护.anyRequest() // 任何请求,登录后可以访问.authenticated();&#125;&#125; 配置成功之后，在控制台查找不到任何Using generated security password即已生效，之后可以用任何用户名，密码只要123456就能登陆,详情查看MyUserDetailsService类]]></content>
      <tags>
        <tag>SpringBoot全家桶</tag>
      </tags>
  </entry>
</search>
